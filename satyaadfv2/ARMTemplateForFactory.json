{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "satyaadfv2"
		},
		"LS_SQL_sasatyav2_sourcedb_orders_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SQL_sasatyav2_sourcedb_orders'"
		},
		"LS_SQL_sasatyav2_targetdb_orders_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SQL_sasatyav2_targetdb_orders'"
		},
		"LS_SQL_targetdb_ProductPurchase_2022_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SQL_targetdb_ProductPurchase_2022'"
		},
		"LS_Storage_Sasatyav2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Storage_Sasatyav2'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_CopyDynamicfile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Dynamic",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_storage_sasatyav2_source_dynamiccopy",
								"type": "DatasetReference",
								"parameters": {
									"DatasetFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Storage_Sasatyav2_target",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-07-19T17:29:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_storage_sasatyav2_source_dynamiccopy')]",
				"[concat(variables('factoryId'), '/datasets/DS_Storage_Sasatyav2_target')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CopyDynamicfile_Timestamp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Dynamic timestamp",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_storage_sasatyav2_source_dynamiccopy",
								"type": "DatasetReference",
								"parameters": {
									"DatasetFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Storage_sssatyav2_Target_timestamp",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-07-21T04:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_storage_sasatyav2_source_dynamiccopy')]",
				"[concat(variables('factoryId'), '/datasets/DS_Storage_sssatyav2_Target_timestamp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Copycustomer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy customer",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_storage_sasatyav2_customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Storage_Sasatyav2_target",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-07-09T12:25:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_storage_sasatyav2_customer')]",
				"[concat(variables('factoryId'), '/datasets/DS_Storage_Sasatyav2_target')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_customerpurchases",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_CustomerPurchase",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Purcchaseorder": {},
									"Customer": {},
									"output": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-07-28T18:24:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_CustomerPurchase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_copyfileifnotexist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is for copy file if not exist",
				"activities": [
					{
						"name": "Get Metadata target file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Storage_sssatyav2_Target_dynamicfile",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@pipeline().parameters.Filename",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata target file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Metadata target file').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_storage_sasatyav2_source_dynamiccopy",
											"type": "DatasetReference",
											"parameters": {
												"DatasetFileName": {
													"value": "@pipeline().parameters.Filename",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Storage_Sasatyav2_target",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-07-20T18:41:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Storage_sssatyav2_Target_dynamicfile')]",
				"[concat(variables('factoryId'), '/datasets/DS_storage_sasatyav2_source_dynamiccopy')]",
				"[concat(variables('factoryId'), '/datasets/DS_Storage_Sasatyav2_target')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_incrementalcopy_dynamic')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup oldwatermarkvalue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT TableName,WatermarkValue as oldwatermarkvalue from [dbo].[watermarktable] where TableName = '@{pipeline().parameters.TableName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_sasatyav2_targetdb_watermarktable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Lookup newwatermarkvalue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select max(@{pipeline().parameters.Watermarkcolumn}) as newwatermarkvalue from @{pipeline().parameters.TableName}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_sasatyav2_sourcedb_orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup oldwatermarkvalue",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Lookup newwatermarkvalue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from @{pipeline().parameters.TableName} where @{pipeline().parameters.Watermarkcolumn} > '@{activity('Lookup oldwatermarkvalue').output.firstRow.oldwatermarkvalue}' AND @{pipeline().parameters.Watermarkcolumn} <= '@{activity('Lookup newwatermarkvalue').output.firstRow.newwatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_sasatyav2_sourcedb_orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_sasatyav2_targetdb_Dynamictable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "update watermarkvalue",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spSetWatermark]",
							"storedProcedureParameters": {
								"NewTime": {
									"value": {
										"value": "@activity('Lookup newwatermarkvalue').output.firstRow.newwatermarkvalue",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@activity('Lookup oldwatermarkvalue').output.firstRow.TableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_sasatyav2_targetdb_orders",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "orders"
					},
					"Watermarkcolumn": {
						"type": "string",
						"defaultValue": "InsertDateTime"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-07-27T17:18:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_sasatyav2_targetdb_watermarktable')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_sasatyav2_sourcedb_orders')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_sasatyav2_targetdb_Dynamictable')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_sasatyav2_targetdb_orders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_incrementalcopy_orders')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup oldwatermarkvalue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT TableName,WatermarkValue as oldwatermarkvalue from [dbo].[watermarktable] where TableName = 'orders'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_sasatyav2_targetdb_watermarktable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Lookup newwatermarkvalue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select max(InsertDateTime) as newwatermarkvalue from [dbo].[orders]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_sasatyav2_sourcedb_orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy orders",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup oldwatermarkvalue",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Lookup newwatermarkvalue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from [dbo].[orders] where InsertDateTime > '@{activity('Lookup oldwatermarkvalue').output.firstRow.oldwatermarkvalue}' AND InsertDateTime <= '@{activity('Lookup newwatermarkvalue').output.firstRow.newwatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_sasatyav2_sourcedb_orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_sasatyav2_targetdb_orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "update watermarkvalue",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy orders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spSetWatermark]",
							"storedProcedureParameters": {
								"NewTime": {
									"value": {
										"value": "@activity('Lookup newwatermarkvalue').output.firstRow.newwatermarkvalue",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@activity('Lookup oldwatermarkvalue').output.firstRow.TableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_sasatyav2_targetdb_orders",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-07-27T16:37:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_sasatyav2_targetdb_watermarktable')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_sasatyav2_sourcedb_orders')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_sasatyav2_targetdb_orders')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_sasatyav2_targetdb_orders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_sasatyav2_sourcedb_orders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_sasatyav2_sourcedb_orders",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductID",
						"type": "varchar"
					},
					{
						"name": "CustomerID",
						"type": "varchar"
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 10,
						"scale": 4
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InsertDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_sasatyav2_sourcedb_orders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_sasatyav2_targetdb_Dynamictable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_sasatyav2_targetdb_orders",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_sasatyav2_targetdb_orders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_sasatyav2_targetdb_orders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_sasatyav2_targetdb_orders",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductID",
						"type": "varchar"
					},
					{
						"name": "CustomerID",
						"type": "varchar"
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 10,
						"scale": 4
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InsertDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_sasatyav2_targetdb_orders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_sasatyav2_targetdb_watermarktable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_sasatyav2_targetdb_orders",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_sasatyav2_targetdb_orders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_targetdb_ProductPurchase_2022')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_targetdb_ProductPurchase_2022",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerCode",
						"type": "varchar"
					},
					{
						"name": "CustomerName",
						"type": "varchar"
					},
					{
						"name": "ProductCount",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ProductPurchase_2022"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_targetdb_ProductPurchase_2022')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Storage_Sasatyav2_target')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Storage_Sasatyav2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "traget"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Storage_Sasatyav2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Storage_sssatyav2_Target_dynamicfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Storage_Sasatyav2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"container": "traget"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Storage_Sasatyav2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Storage_sssatyav2_Target_timestamp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Storage_Sasatyav2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@formatDateTime(utcNow(),'yyyyMMdd')",
							"type": "Expression"
						},
						"container": "traget"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Storage_Sasatyav2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_storage_sasatyav2_customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Storage_Sasatyav2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Customer.txt",
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Storage_Sasatyav2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_storage_sasatyav2_oltp_Customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Storage_Sasatyav2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Customer.txt",
						"container": "oltp"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerCode",
						"type": "String"
					},
					{
						"name": " CustomerName",
						"type": "String"
					},
					{
						"name": " Address",
						"type": "String"
					},
					{
						"name": " PhoneNumber",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Storage_Sasatyav2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_storage_sasatyav2_oltp_PurchaseOrder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Storage_Sasatyav2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "PurchaseOrder.txt",
						"container": "oltp"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PurchaseOrderID",
						"type": "String"
					},
					{
						"name": " CustomerCode",
						"type": "String"
					},
					{
						"name": "ProductCode",
						"type": "String"
					},
					{
						"name": "EmployeeCode",
						"type": "String"
					},
					{
						"name": " PuchaseOrderDate",
						"type": "String"
					},
					{
						"name": " Quantity",
						"type": "String"
					},
					{
						"name": " UnitPrice",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Storage_Sasatyav2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_storage_sasatyav2_source_dynamiccopy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Storage_Sasatyav2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DatasetFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().DatasetFileName",
							"type": "Expression"
						},
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Storage_Sasatyav2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SQL_sasatyav2_sourcedb_orders')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_SQL_sasatyav2_sourcedb_orders_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SQL_sasatyav2_targetdb_orders')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_SQL_sasatyav2_targetdb_orders_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SQL_targetdb_ProductPurchase_2022')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_SQL_targetdb_ProductPurchase_2022_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Storage_Sasatyav2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_Storage_Sasatyav2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_CustomerPurchase')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_storage_sasatyav2_oltp_PurchaseOrder",
								"type": "DatasetReference"
							},
							"name": "Purcchaseorder"
						},
						{
							"dataset": {
								"referenceName": "DS_storage_sasatyav2_oltp_Customer",
								"type": "DatasetReference"
							},
							"name": "Customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_targetdb_ProductPurchase_2022",
								"type": "DatasetReference"
							},
							"name": "output"
						}
					],
					"transformations": [
						{
							"name": "PuchaseOrderprojection"
						},
						{
							"name": "CustomerProjection"
						},
						{
							"name": "QualitycheckPurchaseorder"
						},
						{
							"name": "joinstream"
						},
						{
							"name": "MettricCalculation"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PurchaseOrderID as string,",
						"          { CustomerCode} as string,",
						"          ProductCode as string,",
						"          EmployeeCode as string,",
						"          { PuchaseOrderDate} as string,",
						"          { Quantity} as long,",
						"          { UnitPrice} as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Purcchaseorder",
						"source(output(",
						"          CustomerCode as string,",
						"          { CustomerName} as string,",
						"          { Address} as string,",
						"          { PhoneNumber} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Customer",
						"Purcchaseorder select(mapColumn(",
						"          { CustomerCode},",
						"          { Quantity}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PuchaseOrderprojection",
						"Customer select(mapColumn(",
						"          CustomerCode,",
						"          { CustomerName}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CustomerProjection",
						"PuchaseOrderprojection filter(greater({ Quantity}, 0)) ~> QualitycheckPurchaseorder",
						"QualitycheckPurchaseorder, CustomerProjection join({ CustomerCode} == CustomerCode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinstream",
						"joinstream aggregate(groupBy({ CustomerCode},",
						"          { CustomerName}),",
						"     ProductPurchase = sum({ Quantity})) ~> MettricCalculation",
						"MettricCalculation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerCode as string,",
						"          CustomerName as string,",
						"          ProductCount as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerCode = { CustomerCode},",
						"          CustomerName = { CustomerName},",
						"          ProductCount = ProductPurchase",
						"     )) ~> output"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_storage_sasatyav2_oltp_PurchaseOrder')]",
				"[concat(variables('factoryId'), '/datasets/DS_storage_sasatyav2_oltp_Customer')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_targetdb_ProductPurchase_2022')]"
			]
		}
	]
}